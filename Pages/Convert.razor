@page "/"
@inject IJSRuntime js

<PageTitle>Converter</PageTitle>

<h1>Converter</h1>

<InputFile OnChange="@SetNewSVG" />

<svg
   viewBox="0 0 811.18917 1052.4033"
   width="811.18915"
   height="1052.4033">
@{
    if (data is not null) 
    {
        foreach(var line in data)
        {
             <path
             style="fill:@(line.Selected ? "#FF0000" : "none");stroke:#000000;stroke-miterlimit:10;stroke-width:2;"
             d=@line.Path />
        }
    }
}
</svg>

<p style="font-size:40px;color:@(data is null ? "white" : "black");" disabled=@(data is null)>@(name is "" ? "No Name!" : name)</p>

<button class="btn btn-primary" @onclick="NextObject" disabled=@(data is null)>Next Object</button>

<input placeholder="Name Of Object" @bind="name" disabled=@(data is null) />

<button class="btn btn-primary" @onclick="DeleteObject" disabled=@(data is null)>Delete Object</button>

<button class="btn btn-primary" @onclick="SaveMap" disabled=@(data is null)>Save Map</button>

@code {
    private string name = "";
    private List<SVGData> data;
    private int i = 0;

    private async Task SetNewSVG(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);
        string file = System.Text.Encoding.UTF8.GetString(buffer);

        Console.WriteLine(e.File.Name.Split('.').Last());

        if (e.File.Name.Split('.').Last() == "svg")
            data = SVGData.ProcessSVG(file).ToList();
        else if (e.File.Name.Split('.').Last() == "csv")
            data = SVGData.ProcessCSV(file).ToList();
        else
        {
            await js.InvokeVoidAsync("alert", "This file type is not supported!");
            return;
        }
        data[i].Selected = true;
    }

    private void NextObject()
    {
        var current = data[i];
        current.Selected = false;
        current.Name = name;

        if (i == data.Count - 1) i = 0;
        else i++;
        var next = data[i];
        next.Selected = true;
        name = next.Name;
    }

    private async Task DeleteObject()
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this object?");
        if (!confirmed) return;

        data.RemoveAt(i);
        var next = data[i];
        next.Selected = true;
        name = next.Name;
    }

    public async Task SaveMap()
    {
        var text = SVGData.ToCSV(data);
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await SaveAs("output.csv", bytes);
    }

    public async Task SaveAs(string filename, byte[] data)
    {
        await js.InvokeVoidAsync(
            "saveAsFile",
            filename,
            System.Convert.ToBase64String(data));
    }
}